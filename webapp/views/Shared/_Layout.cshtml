@{
    eSPP.Models.GroupFeature groupFeature = new eSPP.Models.GroupFeature();
    List<Guid> userGroupIDList = new List<Guid>();
    List<eSPP.Models.GroupFeaturesDisplay> groupFeatureDisplayList = new List<eSPP.Models.GroupFeaturesDisplay>();
    if (User.Identity.IsAuthenticated)
    {
        UserGroup userGroup = new UserGroup();
        userGroupIDList = userGroup.GetGroupByLoginUser();
        groupFeatureDisplayList = groupFeature.GetFeatureListByGroup(userGroupIDList);
    }
}

<!DOCTYPE html>
<html lang="en-us" id="@ViewBag.PageId" class="@Settings.CurrentTheme">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

    <title> SmartAdmin - MVC5 </title>
    <meta name="description" content="">
    <meta name="author" content="">

    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

    <!-- Basic Styles -->
    @Styles.Render("~/content/smartadmin")
    <!-- FAVICONS -->
    <link rel="shortcut icon" href="~/content/img/favicon/favicon.ico" type="image/x-icon">
    <link rel="icon" href="~/content/img/favicon/favicon.ico" type="image/x-icon">

    <!-- GOOGLE FONT -->
    <link rel="stylesheet" href="//fonts.googleapis.com/css?family=Open+Sans:400italic,700italic,300,400,700">

    <!-- Specifying a Webpage Icon for Web Clip
         Ref: https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/ConfiguringWebApplications/ConfiguringWebApplications.html -->
    <link rel="apple-touch-icon" href="~/content/img/splash/sptouch-icon-iphone.png">
    <link rel="apple-touch-icon" sizes="76x76" href="~/content/img/splash/touch-icon-ipad.png">
    <link rel="apple-touch-icon" sizes="120x120" href="~/content/img/splash/touch-icon-iphone-retina.png">
    <link rel="apple-touch-icon" sizes="152x152" href="~/content/img/splash/touch-icon-ipad-retina.png">

    <!-- iOS web-app metas : hides Safari UI Components and Changes Status Bar Appearance -->
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">

    <!-- Startup image for web apps -->
    <link rel="apple-touch-startup-image" href="~/content/img/splash/ipad-landscape.png" media="screen and (min-device-width: 481px) and (max-device-width: 1024px) and (orientation:landscape)">
    <link rel="apple-touch-startup-image" href="~/content/img/splash/ipad-portrait.png" media="screen and (min-device-width: 481px) and (max-device-width: 1024px) and (orientation:portrait)">
    <link rel="apple-touch-startup-image" href="~/content/img/splash/iphone.png" media="screen and (max-device-width: 320px)">

</head>
<body class="@ViewBag.PageClass @Settings.CurrentTheme">
    @{ Html.RenderPartial("_Header", RenderSection("topright", false)); }
    @{ Html.RenderPartialIf("_Aside", Request.IsAuthenticated); }
    <div id="main" role="main">
        @{ Html.RenderPartialIf("_Ribbon", Request.IsAuthenticated); }
        @RenderBody()
    </div>
    <div id="timeout"></div>
    @if (Request.IsAuthenticated)
    {
        Html.RenderPartial("_Footer");
        Html.RenderPartialIf("_Tiles", Settings.EnableTiles);
    }
    @{ Html.RenderPartial("_Scripts", RenderSection("pagespecific", false)); }
    @if (groupFeature.ShowFeature(userGroupIDList, groupFeatureDisplayList, null, null, null))
    {
        <script type="text/javascript">
            if (window.location.href.toString().indexOf("account/login") <= 0) {
                window.location.href = '@Url.Action("Login", "Account")';
            }
        </script>
    }
    @if (!Request.IsAuthenticated)
    {
        <script type="text/javascript">
            if (window.location.href.toString().indexOf("account/login") <= 0) {
                window.location.href = '@Url.Action("Login", "Account")';
            }
        </script>
    }
    @*<script type="text/javascript">
            $(document).keydown(function (event) {
                if (event.keyCode == 123) {
                    return false;
                }
                else if (event.ctrlKey && event.shiftKey && event.keyCode == 73) {
                    return false;
                }
            });

            $(document).on("contextmenu", function (e) {
                e.preventDefault();
            });
        </script>*@

    @*@Scripts.Render("~/bundles/jquery")
        @Scripts.Render("~/bundles/bootstrap")*@
    @RenderSection("scripts", required: false)
    <script type="text/javascript">
        // Set timeout variables.
        var warningMinute = 20; // Display warning in 15 Mins.
        var timeOutMinute = 1; // Warning has been shown, give the user 1 minute to interact

        var timoutWarning = warningMinute * 60000;
        var timoutNow = timeOutMinute * 60000;
        var logoutUrl = '/account/login?ReturnUrl=%2f'; // URL to logout page.

        var warningTimer;
        var timeoutTimer;

        $(document).ready(function () {
            console.log("init timer!");
            StartWarningTimer();
        });

        // Start warning timer.
        function StartWarningTimer() {
            //console.log("Warning timer start!");
            warningTimer = setTimeout("IdleWarning()", timoutWarning);
            $(document).bind('keypress.session', function (ed, e) {
                sessKeyPressed(ed, e);
            });
        }

        function sessKeyPressed(ed, e) {
            //reset timer bila ada keypress
            ResetTimeOutTimer();
        }

        // Reset timers.
        function ResetTimeOutTimer() {
            $("#timeout").html('');
            var now = new Date();
            console.log("timer reset at " + now.toTimeString());
            clearTimeout(timeoutTimer);
            StartWarningTimer();
        }

        // Show idle timeout warning dialog.
        function IdleWarning() {
            $("#timeout").html('<div>Anda Akan Ditendang kerana idle selama ' + warningMinute  + ' minit.</div >');
            var now = new Date();
            console.log('Warning keluar at ' + now.toTimeString());
            clearTimeout(warningTimer);
            timeoutTimer = setTimeout("IdleTimeout()", timoutNow);
            //keluar modal dialog utk prompt user
            $("#timeout").dialog({
                modal: true,
                title: 'Sessi login tamat',
                buttons: {
                    "Stay logged in": function () {                        
                        ResetTimeOutTimer();
                        $(this).dialog("close");
                    },
                    Cancel: function () {
                        IdleTimeout();
                        //$(this).dialog("close");
                    }
                }
            });
        }

        // Logout the user.
        function IdleTimeout() {
            //console.log('sudah logout');
            window.location = logoutUrl;
        }
    </script>

    <script type="text/javascript">

                        /*
                        var sess_pollInterval = 60000;
                        var sess_expirationMinutes = 2;
                        var sess_warningMinutes = 1;

                        var sess_intervalID;
                        var sess_lastActivity;

                        $(document).ready(function () {
                            console.log("ready!");
                            initSessionMonitor();
                        });

                        function initSessionMonitor() {
                            sess_lastActivity = new Date();
                            sessSetInterval();
                            $(document).bind('keypress.session', function (ed, e) {
                                sessKeyPressed(ed, e);
                            });
                        }

                        function sessSetInterval() {
                            sess_intervalID = setInterval('sessInterval()', sess_pollInterval);
                        }

                        function sessClearInterval() {
                            clearInterval(sess_intervalID);
                        }

                        function sessKeyPressed(ed, e) {
                            sess_lastActivity = new Date();
                        }

                        function sessPingServer() {
                            //todoCallAjaxFunction
                            sessLogOut();
                        }

                        function sessLogOut() {
                            alert('Session expired');
                            window.location.href = '/account/login?ReturnUrl=%2f';
                        }

                        function sessInterval() {
                            var now = new Date();
                            var diff = now - sess_lastActivity;
                            var diffMins = (diff / 1000 / 60);
                            if (diffMins >= sess_warningMinutes) {
                                //stop timer
                                sessClearInterval();
                                //prompt for attention
                                var sess_ExpireTime = sess_expirationMinutes - sess_warningMinutes;
                                if (confirm(
                                    'Last activity is ' + sess_lastActivity.toTimeString()
                                    + ' minutes (as of ' + now.toTimeString()
                                    + '). Press OK to remain logged in or press Cancel to log off.\n'
                                    + 'If you are logged off any changes will be lost.')) {

                                    //press OK
                                    now = new Date();
                                    diff = now - sess_lastActivity();
                                    diffMins = (diff / 1000 / 60);
                                    alert('diffMin: ' + diffMins + ' sess_ExpireMinutes: ' + sess_expirationMinutes);

                                    if (diffMins > sess_expirationMinutes) {
                                        sessLogOut();
                                    }
                                    else {
                                        sessPingServer();
                                        //start timer again
                                        sess_lastActivity = new Date();
                                        sessSetInterval();
                                        alert('start timer again');
                                    }
                                } else {

                                    //press cancel
                                    sessPingServer();
                                }
                            }
                        }
                        */
    </script>
</body>


</html>